<div class="panel panel-default">
  <div class="panel-heading">
    <div class="pull-right"><a href="#" class="dropdown-toggle" data-toggle="dropdown"><i class="fa fa-calendar"></i> <i class="caret"></i></a>
      <ul id="range" class="dropdown-menu dropdown-menu-right">
        <li><a href="day">{{ text_day }}</a></li>
        <li><a href="week">{{ text_week }}</a></li>
        <li class="active"><a href="month">{{ text_month }}</a></li>
        <li><a href="year">{{ text_year }}</a></li>
      </ul>
    </div>
    <h3 class="panel-title"><i class="fa fa-bar-chart-o"></i> {{ heading_title }}</h3>
  </div>
  <div class="panel-body">
    <div style="position: relative; height:260px; width:100%;">
	<div id="chart-legend"></div>
      <canvas id="chart-sale"></canvas>
    </div>
  </div>
</div>
<link href="view/stylesheet/chart.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="view/javascript/chartjs/chartjs.js"></script> 
<script type="text/javascript">

const getOrCreateLegendList = (chart, id) => {
  const legendContainer = document.getElementById(id);
  let listContainer = legendContainer.querySelector('ul');

  if (!listContainer) {
    listContainer = document.createElement('ul');
    listContainer.classList.add('chart-legend-list');
    legendContainer.classList.add('chart-legend-container');
    legendContainer.appendChild(listContainer);
  }

  return listContainer;
};

const renderCustomLegend = (chartInstance, id) => {
  const legendList = getOrCreateLegendList(chartInstance, id);
  legendList.innerHTML = '';

  chartInstance.data.datasets.forEach((dataset, i) => {
    const li = document.createElement('li');
    li.classList.add('chart-legend-item');

    const box = document.createElement('span');
    box.classList.add('chart-legend-box');
    box.style.backgroundColor = dataset.borderColor;

    const text = document.createElement('span');
    text.classList.add('chart-legend-text');
    text.innerText = dataset.label;

    li.appendChild(box);
    li.appendChild(text);
    legendList.appendChild(li);

    li.addEventListener('click', () => {
      dataset.hidden = !dataset.hidden;
      chartInstance.update();
    });
  });
};
const getOrCreateTooltip = (chart) => {
    let tooltipEl = chart.canvas.parentNode.querySelector('.custom-tooltip');
    if (!tooltipEl) {
        tooltipEl = document.createElement('div');
        tooltipEl.classList.add('custom-tooltip'); 
        chart.canvas.parentNode.appendChild(tooltipEl);
    }
    return tooltipEl;
};

const externalTooltipHandler = (context) => {
    const { chart, tooltip } = context;
    const tooltipEl = getOrCreateTooltip(chart);

    if (tooltip.opacity === 0) {
        tooltipEl.style.opacity = 0;
        return;
    }
    tooltipEl.innerHTML = '';

    // عنوان
    if (tooltip.title) {
        const titleDiv = document.createElement('div');
        titleDiv.classList.add('tooltip-title');
        titleDiv.textContent = tooltip.title.join(' ');
        tooltipEl.appendChild(titleDiv);
    }

    // بدنه
    if (tooltip.body) {
        const bodyLines = tooltip.body.map(b => b.lines).flat();
        bodyLines.forEach((line, i) => {
            const colors = tooltip.labelColors[i];

            const row = document.createElement('div');
            row.classList.add('tooltip-row');

            const colorBox = document.createElement('span');
            colorBox.classList.add('tooltip-color');
            colorBox.style.background = colors.backgroundColor;

            const text = document.createElement('span');
            text.classList.add('tooltip-text');
            text.textContent = line;

            row.appendChild(colorBox);
            row.appendChild(text);
            tooltipEl.appendChild(row);
        });
    }

    // موقعیت
    const { offsetLeft: canvasX, offsetTop: canvasY, clientWidth: canvasWidth, clientHeight: canvasHeight } = chart.canvas;
    let left = canvasX + tooltip.caretX;
    let top = canvasY + tooltip.caretY - tooltipEl.offsetHeight - 8; 
    const tooltipRect = tooltipEl.getBoundingClientRect();
    if (left + tooltipRect.width / 2 > window.innerWidth) {
        left = window.innerWidth - tooltipRect.width / 2 - 10;
    }
    if (left - tooltipRect.width / 2 < 0) {
        left = tooltipRect.width / 2 + 10;
    }
    if (top < 0) {
        top = tooltip.caretY + canvasY + 8;
    }
    tooltipEl.style.left = left + 'px';
    tooltipEl.style.top = top + 'px';
    tooltipEl.style.opacity = 1;
    tooltipEl.style.transform = 'translateX(-50%)';
};


let chartInstance = null;
$('#range a').on('click', function(e) {
    e.preventDefault();
    $(this).parent().parent().find('li').removeClass('active');
    $(this).parent().addClass('active');
    
    $.ajax({
        type: 'get',
        url: 'index.php?route=extension/dashboard/chart/chart&user_token={{ user_token }}&range=' + $(this).attr('href'),
        dataType: 'json',
        success: function(json) {
            
            if (typeof json['order'] == 'undefined') { 
                return false; 
            }
            if (chartInstance) {
                chartInstance.destroy();
            }
            const labels = [];
            const orderData = [];
            const customerData = [];
            
            if (json['xaxis'] && Array.isArray(json['xaxis'])) {
                json['xaxis'].forEach(function(item) {
                    if (Array.isArray(item) && item.length >= 2) {
                        labels.push(item[1]);
                    }
                });
            }
            if (json['order'] && json['order']['data'] && Array.isArray(json['order']['data'])) {
                json['order']['data'].forEach(function(item) {
                    if (Array.isArray(item) && item.length >= 2) {
                        orderData.push(item[1]); 
                    }
                });
            }
            if (json['customer'] && json['customer']['data'] && Array.isArray(json['customer']['data'])) {
                json['customer']['data'].forEach(function(item) {
                    if (Array.isArray(item) && item.length >= 2) {
                        customerData.push(item[1]); 
                    }
                });
            }
            
            if (orderData.length === 0 && customerData.length === 0) {
                $('#chart-sale').closest('.panel-body').html('<div class="text-center text-muted"><i class="fa fa-exclamation-circle"></i> داده‌ای برای نمایش وجود ندارد</div>');
                return;
            }
            
            // ایجاد نمودار
            try {
                const ctx = document.getElementById('chart-sale').getContext('2d');
                chartInstance = new Chart(ctx, {
					
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: json['order']['label'] || 'سفارشات',
                                data: orderData,
                                backgroundColor: 'rgba(76, 176, 79, 0.6)',
                                borderColor: 'rgb(76, 176, 79)',
                                borderWidth: 5,
								tension: 0.2,
          						pointRadius: 4,
          						pointHoverRadius: 12,
                            },
                            {
                                label: json['customer']['label'] || 'مشتریان',
                                data: customerData,
                                backgroundColor: 'rgb(39, 151, 242, 0.6)',
                                borderColor: 'rgb(39, 151, 242)',
                                borderWidth: 5,
								tension: 0.2,
          						pointRadius: 4,
          						pointHoverRadius: 12
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                display: true,
                               ticks: {
                                    font: {
                                        family: 'main_font', 
                                    }
                                }
                            },
                            y: {
                                beginAtZero: true,
								ticks: {
  									precision: 0 ,
									beginAtZero: true,
                                    font: {
                                        family: 'main_font', 
                                    }
								},
								min: 0,
            					suggestedMax: 4
                            }
                        },
                        plugins: {
                            legend: {
                                display: false,
                            },
                            tooltip: {
                                enabled: false,
                                external: externalTooltipHandler
                            },                            
                        },
                        interaction: {
                            intersect: false,
                            mode: 'index',
                        },
                    }
                });
renderCustomLegend(chartInstance, 'chart-legend');

            } catch (error) {
                console.error('خطا در ایجاد نمودار:', error);
            }
        },
        error: function(xhr, ajaxOptions, thrownError) {
           console.error('Error:', thrownError);
        }
    });
});


$(document).ready(function() {
    $('#range .active a').trigger('click');
});
//--></script>